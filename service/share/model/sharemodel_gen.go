// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	shareFieldNames          = builder.RawFieldNames(&Share{})
	shareRows                = strings.Join(shareFieldNames, ",")
	shareRowsExpectAutoSet   = strings.Join(stringx.Remove(shareFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	shareRowsWithPlaceHolder = strings.Join(stringx.Remove(shareFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"

	cacheShareIdPrefix = "cache:share:id:"
)

type (
	shareModel interface {
		Insert(ctx context.Context, data *Share) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Share, error)
		Update(ctx context.Context, data *Share) error
		Delete(ctx context.Context, id int64) error
	}

	defaultShareModel struct {
		sqlc.CachedConn
		table string
	}

	Share struct {
		Id             int64     `db:"id"`
		UserId         int64     `db:"user_id"`
		StoreId        int64     `db:"store_id"`        // 公共池中的唯一标识
		ExpiredTime    int64     `db:"expired_time"`    // 失效时间，单位秒, 【0-永不失效】
		ShareUrl       string    `db:"share_url"`       // 分享链接后缀
		ExtractionCode string    `db:"extraction_code"` // 提取码
		CreateTime     time.Time `db:"create_time"`
		UpdateTime     time.Time `db:"update_time"`
	}
)

func newShareModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultShareModel {
	return &defaultShareModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`share`",
	}
}

func (m *defaultShareModel) Delete(ctx context.Context, id int64) error {
	shareIdKey := fmt.Sprintf("%s%v", cacheShareIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, shareIdKey)
	return err
}

func (m *defaultShareModel) FindOne(ctx context.Context, id int64) (*Share, error) {
	shareIdKey := fmt.Sprintf("%s%v", cacheShareIdPrefix, id)
	var resp Share
	err := m.QueryRowCtx(ctx, &resp, shareIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", shareRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShareModel) Insert(ctx context.Context, data *Share) (sql.Result, error) {
	shareIdKey := fmt.Sprintf("%s%v", cacheShareIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, shareRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.StoreId, data.ExpiredTime, data.ShareUrl, data.ExtractionCode)
	}, shareIdKey)
	return ret, err
}

func (m *defaultShareModel) Update(ctx context.Context, data *Share) error {
	shareIdKey := fmt.Sprintf("%s%v", cacheShareIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, shareRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.StoreId, data.ExpiredTime, data.ShareUrl, data.ExtractionCode, data.Id)
	}, shareIdKey)
	return err
}

func (m *defaultShareModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheShareIdPrefix, primary)
}

func (m *defaultShareModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", shareRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultShareModel) tableName() string {
	return m.table
}
