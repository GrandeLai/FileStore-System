// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	storeFieldNames          = builder.RawFieldNames(&Store{})
	storeRows                = strings.Join(storeFieldNames, ",")
	storeRowsExpectAutoSet   = strings.Join(stringx.Remove(storeFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	storeRowsWithPlaceHolder = strings.Join(stringx.Remove(storeFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"

	cacheStoreIdPrefix   = "cache:store:id:"
	cacheStoreHashPrefix = "cache:store:hash:"
)

type (
	storeModel interface {
		Insert(ctx context.Context, data *Store) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Store, error)
		FindOneByHash(ctx context.Context, hash string) (*Store, error)
		Update(ctx context.Context, data *Store) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStoreModel struct {
		sqlc.CachedConn
		table string
	}

	Store struct {
		Id         int64     `db:"id"`
		Hash       string    `db:"hash"` // 文件的唯一标识
		Size       int64     `db:"size"` // 文件大小
		Ext        string    `db:"ext"`  // 文件扩展名
		Path       string    `db:"path"` // 文件路径
		Name       string    `db:"name"`
		Status     int64     `db:"status"`    // 状态(可用/禁用/已删除等状态)
		IsFolder   int64     `db:"is_folder"` // 是否为文件夹
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newStoreModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultStoreModel {
	return &defaultStoreModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`store`",
	}
}

func (m *defaultStoreModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	storeHashKey := fmt.Sprintf("%s%v", cacheStoreHashPrefix, data.Hash)
	storeIdKey := fmt.Sprintf("%s%v", cacheStoreIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, storeHashKey, storeIdKey)
	return err
}

func (m *defaultStoreModel) FindOne(ctx context.Context, id int64) (*Store, error) {
	storeIdKey := fmt.Sprintf("%s%v", cacheStoreIdPrefix, id)
	var resp Store
	err := m.QueryRowCtx(ctx, &resp, storeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", storeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStoreModel) FindOneByHash(ctx context.Context, hash string) (*Store, error) {
	storeHashKey := fmt.Sprintf("%s%v", cacheStoreHashPrefix, hash)
	var resp Store
	err := m.QueryRowIndexCtx(ctx, &resp, storeHashKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `hash` = ? limit 1", storeRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, hash); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStoreModel) Insert(ctx context.Context, data *Store) (sql.Result, error) {
	storeHashKey := fmt.Sprintf("%s%v", cacheStoreHashPrefix, data.Hash)
	storeIdKey := fmt.Sprintf("%s%v", cacheStoreIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, storeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Hash, data.Size, data.Ext, data.Path, data.Name, data.Status, data.IsFolder)
	}, storeHashKey, storeIdKey)
	return ret, err
}

func (m *defaultStoreModel) Update(ctx context.Context, newData *Store) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	storeHashKey := fmt.Sprintf("%s%v", cacheStoreHashPrefix, data.Hash)
	storeIdKey := fmt.Sprintf("%s%v", cacheStoreIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, storeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Hash, newData.Size, newData.Ext, newData.Path, newData.Name, newData.Status, newData.IsFolder, newData.Id)
	}, storeHashKey, storeIdKey)
	return err
}

func (m *defaultStoreModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheStoreIdPrefix, primary)
}

func (m *defaultStoreModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", storeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStoreModel) tableName() string {
	return m.table
}
