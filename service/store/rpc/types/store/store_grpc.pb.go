// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: store.proto

package store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	GetStoreNameByStoreId(ctx context.Context, in *StoreIdRequest, opts ...grpc.CallOption) (*StoreNameResponse, error)
	CreateByShare(ctx context.Context, in *CreateByShareRequest, opts ...grpc.CallOption) (*CreateByShareResponse, error)
	CreateByShareInBatch(ctx context.Context, in *CreateByShareInBatchRequest, opts ...grpc.CallOption) (*CreateByShareInBatchResponse, error)
	GetStoreInfoInBatchByStoreId(ctx context.Context, in *StoreIdsRequest, opts ...grpc.CallOption) (*StoreInfosResponse, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) GetStoreNameByStoreId(ctx context.Context, in *StoreIdRequest, opts ...grpc.CallOption) (*StoreNameResponse, error) {
	out := new(StoreNameResponse)
	err := c.cc.Invoke(ctx, "/store.store/getStoreNameByStoreId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) CreateByShare(ctx context.Context, in *CreateByShareRequest, opts ...grpc.CallOption) (*CreateByShareResponse, error) {
	out := new(CreateByShareResponse)
	err := c.cc.Invoke(ctx, "/store.store/createByShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) CreateByShareInBatch(ctx context.Context, in *CreateByShareInBatchRequest, opts ...grpc.CallOption) (*CreateByShareInBatchResponse, error) {
	out := new(CreateByShareInBatchResponse)
	err := c.cc.Invoke(ctx, "/store.store/createByShareInBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetStoreInfoInBatchByStoreId(ctx context.Context, in *StoreIdsRequest, opts ...grpc.CallOption) (*StoreInfosResponse, error) {
	out := new(StoreInfosResponse)
	err := c.cc.Invoke(ctx, "/store.store/getStoreInfoInBatchByStoreId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	GetStoreNameByStoreId(context.Context, *StoreIdRequest) (*StoreNameResponse, error)
	CreateByShare(context.Context, *CreateByShareRequest) (*CreateByShareResponse, error)
	CreateByShareInBatch(context.Context, *CreateByShareInBatchRequest) (*CreateByShareInBatchResponse, error)
	GetStoreInfoInBatchByStoreId(context.Context, *StoreIdsRequest) (*StoreInfosResponse, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) GetStoreNameByStoreId(context.Context, *StoreIdRequest) (*StoreNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreNameByStoreId not implemented")
}
func (UnimplementedStoreServer) CreateByShare(context.Context, *CreateByShareRequest) (*CreateByShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateByShare not implemented")
}
func (UnimplementedStoreServer) CreateByShareInBatch(context.Context, *CreateByShareInBatchRequest) (*CreateByShareInBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateByShareInBatch not implemented")
}
func (UnimplementedStoreServer) GetStoreInfoInBatchByStoreId(context.Context, *StoreIdsRequest) (*StoreInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreInfoInBatchByStoreId not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_GetStoreNameByStoreId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetStoreNameByStoreId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.store/getStoreNameByStoreId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetStoreNameByStoreId(ctx, req.(*StoreIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_CreateByShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateByShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).CreateByShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.store/createByShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).CreateByShare(ctx, req.(*CreateByShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_CreateByShareInBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateByShareInBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).CreateByShareInBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.store/createByShareInBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).CreateByShareInBatch(ctx, req.(*CreateByShareInBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetStoreInfoInBatchByStoreId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetStoreInfoInBatchByStoreId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.store/getStoreInfoInBatchByStoreId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetStoreInfoInBatchByStoreId(ctx, req.(*StoreIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getStoreNameByStoreId",
			Handler:    _Store_GetStoreNameByStoreId_Handler,
		},
		{
			MethodName: "createByShare",
			Handler:    _Store_CreateByShare_Handler,
		},
		{
			MethodName: "createByShareInBatch",
			Handler:    _Store_CreateByShareInBatch_Handler,
		},
		{
			MethodName: "getStoreInfoInBatchByStoreId",
			Handler:    _Store_GetStoreInfoInBatchByStoreId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store.proto",
}
