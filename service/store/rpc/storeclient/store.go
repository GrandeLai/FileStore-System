// Code generated by goctl. DO NOT EDIT!
// Source: store.proto

package storeclient

import (
	"context"

	"FileStore-System/service/store/rpc/types/store"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateByShareInBatchRequest  = store.CreateByShareInBatchRequest
	CreateByShareInBatchResponse = store.CreateByShareInBatchResponse
	CreateByShareRequest         = store.CreateByShareRequest
	CreateByShareResponse        = store.CreateByShareResponse
	StoreIdRequest               = store.StoreIdRequest
	StoreIdsRequest              = store.StoreIdsRequest
	StoreInfo                    = store.StoreInfo
	StoreInfosResponse           = store.StoreInfosResponse
	StoreNameResponse            = store.StoreNameResponse

	Store interface {
		GetStoreNameByStoreId(ctx context.Context, in *StoreIdRequest, opts ...grpc.CallOption) (*StoreNameResponse, error)
		CreateByShare(ctx context.Context, in *CreateByShareRequest, opts ...grpc.CallOption) (*CreateByShareResponse, error)
		CreateByShareInBatch(ctx context.Context, in *CreateByShareInBatchRequest, opts ...grpc.CallOption) (*CreateByShareInBatchResponse, error)
		GetStoreInfoInBatchByStoreId(ctx context.Context, in *StoreIdsRequest, opts ...grpc.CallOption) (*StoreInfosResponse, error)
	}

	defaultStore struct {
		cli zrpc.Client
	}
)

func NewStore(cli zrpc.Client) Store {
	return &defaultStore{
		cli: cli,
	}
}

func (m *defaultStore) GetStoreNameByStoreId(ctx context.Context, in *StoreIdRequest, opts ...grpc.CallOption) (*StoreNameResponse, error) {
	client := store.NewStoreClient(m.cli.Conn())
	return client.GetStoreNameByStoreId(ctx, in, opts...)
}

func (m *defaultStore) CreateByShare(ctx context.Context, in *CreateByShareRequest, opts ...grpc.CallOption) (*CreateByShareResponse, error) {
	client := store.NewStoreClient(m.cli.Conn())
	return client.CreateByShare(ctx, in, opts...)
}

func (m *defaultStore) CreateByShareInBatch(ctx context.Context, in *CreateByShareInBatchRequest, opts ...grpc.CallOption) (*CreateByShareInBatchResponse, error) {
	client := store.NewStoreClient(m.cli.Conn())
	return client.CreateByShareInBatch(ctx, in, opts...)
}

func (m *defaultStore) GetStoreInfoInBatchByStoreId(ctx context.Context, in *StoreIdsRequest, opts ...grpc.CallOption) (*StoreInfosResponse, error) {
	client := store.NewStoreClient(m.cli.Conn())
	return client.GetStoreInfoInBatchByStoreId(ctx, in, opts...)
}
